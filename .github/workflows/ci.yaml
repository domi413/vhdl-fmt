name: CI

on:
  pull_request:
    types:
      - opened
      - synchronize
      - ready_for_review
      - reopened

jobs:
  changes:
    runs-on: ubuntu-latest
    name: Detect source-relevant changes
    outputs:
      code: ${{ steps.filter.outputs.code }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Filter changes
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            code:
              - 'src/**/*.{c,cc,cpp,cxx,h,hpp,hxx}'
              - 'tests/**/*.{c,cc,cpp,cxx,h,hpp,hxx}'
              - 'grammars/**'
              - 'CMakeLists.txt'
              - '**/CMakeLists.txt'
              - 'CMakeUserPresets.json'
              - 'conanfile.txt'
              - '.clang-format'
              - '.clang-tidy'

  dictionary:
    runs-on: ubuntu-latest
    name: Check if dictionary is sorted and all ignored words are used
    timeout-minutes: 1

    if: ${{ !github.event.pull_request.draft }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Check if dictionary is sorted
        run: |
          BOLD_RED="\033[1;31m"
          BOLD_YELLOW="\033[1;33m"
          BOLD_GREEN="\033[1;32m"
          RESET="\033[0m"

          # Check if all ignored words are actually used
          bash .github/scripts/check-cspell-ignored.sh

          if [ ! -f ".cspell_ignored" ]; then
            echo -e "${BOLD_RED}Error: .cspell_ignored not found${RESET}"
            exit 1
          fi

          # Check if file is sorted (case-insensitive)
          if sort -cf .cspell_ignored; then
            echo -e "${BOLD_GREEN}âœ“ .cspell_ignored is properly sorted${RESET}"
          else
            echo -e "${BOLD_RED}Error: .cspell_ignored is not sorted alphabetically (case-insensitive)${RESET}"
            echo -e "${BOLD_YELLOW}To fix this, run: make sort-dictionary{RESET}"
            exit 1
          fi
        shell: bash

  spellcheck:
    runs-on: ubuntu-latest
    name: Spellcheck
    timeout-minutes: 1

    if: ${{ !github.event.pull_request.draft }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Starting cspell
        uses: streetsidesoftware/cspell-action@v7
        with:
          files: ""
          root: "."
          check_dot_files: false
          inline: error
          treat_flagged_words_as_errors: false
          suggestions: true
          strict: true
          config: ".cspell.yaml"
          incremental_files_only: ${{ env.ACT != 'true' }}
          verbose: true
          use_cspell_files: false

  build:
    runs-on: ubuntu-latest
    name: Build, Test and Check Formatting
    timeout-minutes: 15
    container:
      image: ghcr.io/vedivad/vhdlfmt-ci:latest
    env:
      CONAN_HOME: /root/.conan2
    needs: [changes, dictionary, spellcheck]
    if: ${{ !github.event.pull_request.draft && needs.changes.outputs.code == 'true' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Cache Conan packages
        uses: actions/cache@v4
        with:
          path: /root/.conan2
          key: conan-${{ runner.os }}-${{ hashFiles('conanfile.txt') }}-v1
          restore-keys: |
            conan-${{ runner.os }}-v1
            conan-${{ runner.os }}-

      - name: Build
        run: make

      - name: Run tests
        run: make test

      - name: Check formatting
        run: make check-format


  lint:
    runs-on: ubuntu-latest
    name: Lint
    timeout-minutes: 20
    container:
      image: ghcr.io/vedivad/vhdlfmt-ci:latest
    env:
      CONAN_HOME: /root/.conan2
    needs: [changes, dictionary, spellcheck, build]
    if: ${{ !github.event.pull_request.draft && needs.changes.outputs.code == 'true' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Cache Conan packages
        uses: actions/cache@v4
        with:
          path: /root/.conan2
          key: conan-${{ runner.os }}-${{ hashFiles('conanfile.txt') }}-v1
          restore-keys: |
            conan-${{ runner.os }}-v1
            conan-${{ runner.os }}-

      - name: Prepare compile_commands (configure only)
        run: |
          make clean
          make conan
          cmake --preset conan-debug

      - name: Run lint
        run: make lint
