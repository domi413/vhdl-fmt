name: CI

on:
  pull_request:
    types:
      - opened
      - synchronize
      - ready_for_review
      - reopened

jobs:
  dictionary:
    runs-on: ubuntu-latest
    name: Check if dictionary is sorted and all ignored words are used
    timeout-minutes: 1

    if: ${{ !github.event.pull_request.draft }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Check if dictionary is sorted
        run: |
          BOLD_RED="\033[1;31m"
          BOLD_YELLOW="\033[1;33m"
          BOLD_GREEN="\033[1;32m"
          RESET="\033[0m"

          # Check if all ignored words are actually used
          bash .github/scripts/check-cspell-ignored.sh

          if [ ! -f ".cspell_ignored" ]; then
            echo -e "${BOLD_RED}Error: .cspell_ignored not found${RESET}"
            exit 1
          fi

          # Check if file is sorted (case-insensitive)
          if sort -cf .cspell_ignored; then
            echo -e "${BOLD_GREEN}âœ“ .cspell_ignored is properly sorted${RESET}"
          else
            echo -e "${BOLD_RED}Error: .cspell_ignored is not sorted alphabetically (case-insensitive)${RESET}"
            echo -e "${BOLD_YELLOW}To fix this, run: make sort-dictionary{RESET}"
            exit 1
          fi
        shell: bash

  spellcheck:
    runs-on: ubuntu-latest
    name: Spellcheck
    timeout-minutes: 1

    if: ${{ !github.event.pull_request.draft }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Starting cspell
        uses: streetsidesoftware/cspell-action@v7
        with:
          files: ""
          root: "."
          check_dot_files: false
          inline: error
          treat_flagged_words_as_errors: false
          suggestions: true
          strict: true
          config: ".cspell.yaml"
          incremental_files_only: ${{ env.ACT != 'true' }}
          verbose: true
          use_cspell_files: false

  lint:
    runs-on: ubuntu-latest
    name: Build, Lint, Format Check and Test
    timeout-minutes: 20
    container:
      image: archlinux:base-devel

    if: ${{ !github.event.pull_request.draft }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            /var/cache/pacman/pkg
            /home/aur/.cache/yay
            /home/aur/yay
          key: arch-deps-${{ runner.os }}-${{ hashFiles('.github/workflows/*.yml') }}-v1
          restore-keys: |
            arch-deps-${{ runner.os }}-v1
            arch-deps-${{ runner.os }}-

      - name: Cache Conan packages
        uses: actions/cache@v4
        with:
          path: /github/home/.conan2
          key: conan-${{ runner.os }}-${{ hashFiles('conanfile.txt') }}-v1
          restore-keys: |
            conan-${{ runner.os }}-v1
            conan-${{ runner.os }}-

      - name: Cache uv packages
        uses: actions/cache@v4
        with:
          path: /github/home/.local/share/uv/
          key: uv-cache-${{ runner.os }}-${{ hashFiles('pyproject.toml', 'requirements.txt') }}-v1
          restore-keys: |
            uv-cache-${{ runner.os }}-v1
            uv-cache-${{ runner.os }}-

      - name: Install dependencies
        run: |
          pacman -Sy --needed --noconfirm \
              base-devel \
              clang \
              cmake \
              git \
              make \
              ninja \
              python \
              uv \

          # Create venv and install python packages
          uv venv venv
          source venv/bin/activate

          uv pip install conan gersemi

      - name: Setup Conan profile
        run: |
          source venv/bin/activate
          conan profile detect --force

      - name: Build
        run: make

      - name: Check formatting
        run: make check-format

      # - name: Run lint
      #   run: make lint
      #
      # - name: Run tests
      #   run: make test
