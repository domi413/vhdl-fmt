name: CI

on:
  pull_request:
    types:
      - opened
      - synchronize
      - ready_for_review
      - reopened

jobs:
  dictionary:
    runs-on: ubuntu-latest
    name: Dictionary
    timeout-minutes: 1

    if: ${{ !github.event.pull_request.draft }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Check if dictionary is sorted
        run: |
          BOLD_RED="\033[1;31m"
          BOLD_YELLOW="\033[1;33m"
          BOLD_GREEN="\033[1;32m"
          RESET="\033[0m"

          # Check if all ignored words are actually used
          bash .github/scripts/check-cspell-ignored.sh

          if [ ! -f ".cspell_ignored" ]; then
            echo -e "${BOLD_RED}Error: .cspell_ignored not found${RESET}"
            exit 1
          fi

          # Check if file is sorted (case-insensitive)
          if sort -cf .cspell_ignored; then
            echo -e "${BOLD_GREEN}âœ“ .cspell_ignored is properly sorted${RESET}"
          else
            echo -e "${BOLD_RED}Error: .cspell_ignored is not sorted alphabetically (case-insensitive)${RESET}"
            echo -e "${BOLD_YELLOW}To fix this, run: make sort-dictionary{RESET}"
            exit 1
          fi
        shell: bash

  spellcheck:
    runs-on: ubuntu-latest
    name: Spellcheck
    timeout-minutes: 1

    if: ${{ !github.event.pull_request.draft }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Starting cspell
        uses: streetsidesoftware/cspell-action@v7
        with:
          files: ""
          root: "."
          check_dot_files: false
          inline: error
          treat_flagged_words_as_errors: false
          suggestions: true
          strict: true
          config: ".cspell.yaml"
          incremental_files_only: ${{ env.ACT != 'true' }}
          verbose: true
          use_cspell_files: false

  get-changed-cpp-files:
    runs-on: ubuntu-latest
    name: Get changed C++ files

    if: ${{ !github.event.pull_request.draft }}

    outputs:
      any_cpp_changed: ${{ steps.changed-files-cpp.outputs.any_changed }}
      changed_cpp_files: ${{ steps.changed-files-cpp.outputs.all_changed_files }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed C++ files
        id: changed-files-cpp
        uses: tj-actions/changed-files@v47
        with:
          files: |
            **/*.cpp
            **/*.hpp

      - name: Print changed files
        run: |
          echo "Changed C++ files:"
          echo "${{ steps.changed-files-cpp.outputs.all_changed_files }}"

  build:
    runs-on: ubuntu-latest
    name: Build
    timeout-minutes: 15

    container:
      image: ghcr.io/vedivad/vhdlfmt-ci:latest
    env:
      CONAN_HOME: /root/.conan2

    if: ${{ !github.event.pull_request.draft }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Cache Conan packages
        uses: actions/cache@v4
        with:
          path: /root/.conan2
          key: conan-${{ runner.os }}-${{ hashFiles('conanfile.txt') }}-v1
          restore-keys: |
            conan-${{ runner.os }}-v1
            conan-${{ runner.os }}-

      - name: Build
        run: make

  formatter:
    runs-on: ubuntu-latest
    name: Formatter Check
    timeout-minutes: 2

    container:
      image: ghcr.io/vedivad/vhdlfmt-ci:latest
    env:
      CONAN_HOME: /root/.conan2

    if: ${{ !github.event.pull_request.draft }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check formatting
        run: make check-format

  lint:
    runs-on: ubuntu-latest
    name: Lint
    needs: [get-changed-cpp-files, build]
    timeout-minutes: 10

    container:
      image: ghcr.io/vedivad/vhdlfmt-ci:latest
    env:
      CONAN_HOME: /root/.conan2
      SOURCES_TO_LINT: ${{ env.ACT == 'true' && '*' || needs.get-changed-cpp-files.outputs.changed_cpp_files }}

    if: ${{ !github.event.pull_request.draft && needs.get-changed-cpp-files.outputs.any_cpp_changed == 'true' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Cache Conan packages
        uses: actions/cache@v4
        with:
          path: /root/.conan2
          key: conan-${{ runner.os }}-${{ hashFiles('conanfile.txt') }}-v1
          restore-keys: |
            conan-${{ runner.os }}-v1
            conan-${{ runner.os }}-

      - name: Build
        run: make

      - name: Run linter
        run: make lint

  test:
    runs-on: ubuntu-latest
    name: Test
    needs: build
    timeout-minutes: 10

    container:
      image: ghcr.io/vedivad/vhdlfmt-ci:latest
    env:
      CONAN_HOME: /root/.conan2

    if: ${{ !github.event.pull_request.draft }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Cache Conan packages
        uses: actions/cache@v4
        with:
          path: /root/.conan2
          key: conan-${{ runner.os }}-${{ hashFiles('conanfile.txt') }}-v1
          restore-keys: |
            conan-${{ runner.os }}-v1
            conan-${{ runner.os }}-

      - name: Build
        run: make

      - name: Run tests
        run: make test
