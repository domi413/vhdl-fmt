name: CI

on:
  pull_request:
    types:
      - opened
      - synchronize
      - ready_for_review
      - reopened

jobs:
  dictionary:
    runs-on: ubuntu-latest
    name: Check if dictionary is sorted and all ignored words are used
    timeout-minutes: 1

    if: ${{ !github.event.pull_request.draft }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Check if dictionary is sorted
        run: |
          BOLD_RED="\033[1;31m"
          BOLD_YELLOW="\033[1;33m"
          BOLD_GREEN="\033[1;32m"
          RESET="\033[0m"

          # Check if all ignored words are actually used
          bash .github/scripts/check-cspell-ignored.sh

          if [ ! -f ".cspell_ignored.txt" ]; then
            echo -e "${BOLD_RED}Error: .cspell_ignored.txt not found${RESET}"
            exit 1
          fi

          # Check if file is sorted (case-insensitive)
          if sort -cf .cspell_ignored.txt; then
            echo -e "${BOLD_GREEN}âœ“ .cspell_ignored.txt is properly sorted${RESET}"
          else
            echo -e "${BOLD_RED}Error: .cspell_ignored.txt is not sorted alphabetically (case-insensitive)${RESET}"
            echo -e "${BOLD_YELLOW}To fix this, run: make sort-dictionary{RESET}"
            exit 1
          fi
        shell: bash

  spellcheck:
    runs-on: ubuntu-latest
    name: Spellcheck
    timeout-minutes: 1

    if: ${{ !github.event.pull_request.draft }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Starting cspell
        uses: streetsidesoftware/cspell-action@v7
        with:
          files: ""
          root: "."
          check_dot_files: false
          inline: error
          treat_flagged_words_as_errors: false
          suggestions: true
          strict: true
          config: ".cspell.yaml"
          incremental_files_only: ${{ env.ACT != 'true' }}
          verbose: true
          use_cspell_files: false

  # FIXME: Implement test, lint and formatting. We may not use
  # archlinux:latest or at least only one runner for all tasks (not
  # really clean solution)
  #
  # A General C++ workflow: https://github.com/marketplace/actions/setup-cpp-c-c
  # Not sure what the difference here is: https://github.com/marketplace/actions/get-cmake

  test:
    # https://github.com/marketplace/actions/gcovr-action
    runs-on: ubuntu-latest
    name: Test
    timeout-minutes: 3

    if: ${{ !github.event.pull_request.draft }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: XXXXX

  build:
    strategy:
      matrix:
        go: [stable]
        os: [ubuntu-latest, macos-latest, windows-latest]

    name: Build
    runs-on: ${{ matrix.os }}
    timeout-minutes: 3
    permissions:
      contents: read
      pull-requests: read

    if: ${{ !github.event.pull_request.draft }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: XXXXX

  lint:
    # https://github.com/marketplace/actions/c-c-linter
    runs-on: ubuntu-latest
    name: Lint and format
    timeout-minutes: 10
    container: archlinux:latest

    if: ${{ !github.event.pull_request.draft }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install archlinux dependencies
        run: |
          pacman -Sy --noconfirm --needed \
            clang \
            cmake \

      - name: Run lint
        run: make lint
