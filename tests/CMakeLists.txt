add_executable(
    tests
    #
    # Design Units
    ast/nodes/design_units/test_architecture.cpp
    ast/nodes/design_units/test_comments.cpp
    ast/nodes/design_units/test_configuration.cpp
    ast/nodes/design_units/test_context.cpp
    ast/nodes/design_units/test_entity.cpp
    ast/nodes/design_units/test_entity_instantiation.cpp
    ast/nodes/design_units/test_interface_package.cpp
    ast/nodes/design_units/test_newlines.cpp
    ast/nodes/design_units/test_package.cpp
    ast/nodes/design_units/test_package_body.cpp
    ast/nodes/design_units/test_package_instantiation.cpp
    #
    # Declarations
    ast/nodes/declarations/test_alias.cpp
    ast/nodes/declarations/test_attribute.cpp
    ast/nodes/declarations/test_component.cpp
    ast/nodes/declarations/test_constant.cpp
    ast/nodes/declarations/test_constraints.cpp
    ast/nodes/declarations/test_disconnect_spec.cpp
    ast/nodes/declarations/test_file.cpp
    ast/nodes/declarations/test_function.cpp
    ast/nodes/declarations/test_generic_param.cpp
    ast/nodes/declarations/test_group.cpp
    ast/nodes/declarations/test_impure_function.cpp
    ast/nodes/declarations/test_library_clause.cpp
    ast/nodes/declarations/test_port.cpp
    ast/nodes/declarations/test_procedure.cpp
    ast/nodes/declarations/test_protected_type.cpp
    ast/nodes/declarations/test_shared_variable.cpp
    ast/nodes/declarations/test_signal.cpp
    ast/nodes/declarations/test_subtype.cpp
    ast/nodes/declarations/test_type.cpp
    ast/nodes/declarations/test_use_clause.cpp
    ast/nodes/declarations/test_variable.cpp
    #
    # Expressions
    ast/nodes/expressions/test_access_deref.cpp
    ast/nodes/expressions/test_aggregate.cpp
    ast/nodes/expressions/test_allocator.cpp
    ast/nodes/expressions/test_attribute.cpp
    ast/nodes/expressions/test_binary.cpp
    ast/nodes/expressions/test_conditional.cpp
    ast/nodes/expressions/test_external_name.cpp
    ast/nodes/expressions/test_function_call.cpp
    ast/nodes/expressions/test_group.cpp
    ast/nodes/expressions/test_indexed.cpp
    ast/nodes/expressions/test_matching_rel_ops.cpp
    ast/nodes/expressions/test_open.cpp
    ast/nodes/expressions/test_paren.cpp
    ast/nodes/expressions/test_qualified.cpp
    ast/nodes/expressions/test_range.cpp
    ast/nodes/expressions/test_reduction_ops.cpp
    ast/nodes/expressions/test_slice.cpp
    ast/nodes/expressions/test_string_literal.cpp
    ast/nodes/expressions/test_token.cpp
    ast/nodes/expressions/test_type_conversion.cpp
    ast/nodes/expressions/test_unary.cpp
    #
    # Statements
    ast/nodes/statements/test_assert.cpp
    ast/nodes/statements/test_block.cpp
    ast/nodes/statements/test_case_generate.cpp
    ast/nodes/statements/test_case.cpp
    ast/nodes/statements/test_component_instantiation.cpp
    ast/nodes/statements/test_concurrent_assign.cpp
    ast/nodes/statements/test_concurrent_procedure_call.cpp
    ast/nodes/statements/test_conditional_assign.cpp
    ast/nodes/statements/test_exit.cpp
    ast/nodes/statements/test_file_io.cpp
    ast/nodes/statements/test_for_loop.cpp
    ast/nodes/statements/test_force_release.cpp
    ast/nodes/statements/test_generate.cpp
    ast/nodes/statements/test_guarded_signal.cpp
    ast/nodes/statements/test_if_generate_with_alternative.cpp
    ast/nodes/statements/test_if.cpp
    ast/nodes/statements/test_loop_with_label.cpp
    ast/nodes/statements/test_next.cpp
    ast/nodes/statements/test_null.cpp
    ast/nodes/statements/test_postponed_process.cpp
    ast/nodes/statements/test_procedure_call.cpp
    ast/nodes/statements/test_process.cpp
    ast/nodes/statements/test_process_instantiation.cpp
    ast/nodes/statements/test_report.cpp
    ast/nodes/statements/test_return.cpp
    ast/nodes/statements/test_selected_assign.cpp
    ast/nodes/statements/test_sequential_assign.cpp
    ast/nodes/statements/test_wait.cpp
    ast/nodes/statements/test_while_loop.cpp
    #
    # cli
    cli/test_argument_parser.cpp
    cli/test_config_reader.cpp
)

target_link_libraries(
    tests
    PRIVATE
        Catch2::Catch2WithMain
        ast
        builder
        cli
        emit
)

target_include_directories(
    tests
    PRIVATE
        ${CMAKE_SOURCE_DIR}/src
        ${CMAKE_SOURCE_DIR}/tests
        ${GENERATED_DIR}
)

# Copy test data and define macro for C++
file(COPY data DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
target_compile_definitions(
    tests
    PRIVATE
        TEST_DATA_DIR="${CMAKE_CURRENT_SOURCE_DIR}/data"
)

include(CTest)
include(Catch)
catch_discover_tests(tests)
